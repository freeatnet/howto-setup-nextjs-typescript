on:
  schedule:
    - cron: "0 0 * * 5"
  push:
    branches: [ master ]
    paths:
    - '.github/workflows/*'
    - '*-files/*'
  workflow_dispatch:

jobs:
  reset-output:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: (docs skip) Clear output
      run: (git checkout output || git checkout -b output); git reset --hard origin/master; git push --force origin output

  ##
  # CHAPTER 1. Set up a TypeScript Next.js app.
  #
  create-app:
    needs: [ reset-output ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: output
    - name: (docs skip) Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: Create a new Next.js app named 'example-app'
      run: yarn create next-app example-app
    - name: Start TypeScript conversion by creating `tsconfig.json`
      run: touch tsconfig.json
      working-directory: ./example-app
    - name: Find out TypeScript dependencies from next dev
      run: echo "##[set-output name=deps_command;]$(yarn dev 2>&1 | grep 'yarn add' | xargs)"
      id: get_dependencies_command
      working-directory: ./example-app
    - name: Install TypeScript dependencies!
      run: ${{steps.get_dependencies_command.outputs.deps_command}}
      working-directory: ./example-app
    - name: Replace JavaScript files with TypeScript
      run: |-
        cp -R create-app-files/app/pages example-app/
        rm example-app/pages/*.js example-app/pages/api/*.js
    - name: Start `next dev`
      run: (timeout 15 yarn dev | tee output.log) || true; grep "compiled successfully" output.log
      working-directory: ./example-app
    - name: (docs skip) Remove technical file output.log
      run: rm example-app/output.log
    - name: Enable TypeScript strict & incremental modes
      run: |-
        cp tsconfig.json{,.bak}
        jq -s '.[0] * .[1]' -- tsconfig.json.bak - <<- NEW_SCRIPTS > tsconfig.json
        {
          "compilerOptions": {
          "strict": true,
          "incremental": true
          }
        }
        NEW_SCRIPTS
        diff -y tsconfig.json{.bak,} || true
        rm tsconfig.json.bak
      working-directory: ./example-app
    - name: Add `yarn check-types` command
      run: |-
        cp package.json{,.bak}
        jq -s '.[0] * .[1]' -- package.json.bak - <<- NEW_SCRIPTS > package.json
        {
          "scripts": {
            "check-types": "tsc --pretty --noEmit"
          }
        }
        NEW_SCRIPTS
        diff -y package.json{.bak,} || true
        rm package.json.bak
      working-directory: ./example-app
    - name: (docs skip) Get tag timestamp
      run: echo "TAG_DATE=$(date +'%Y%m%d.%H%M')" >> $GITHUB_ENV
    - name: Commit our new app
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Set up our brand new shiny Next.js TypeScript app
        tagging_message: 'with-typescript-${{ env.TAG_DATE }}'

        # Optional name of the branch the commit should be pushed to
        # Required if Action is used in Workflow listening to the `pull_request` event.
        # Also required for almost all other events (eg. `schedule`)
        branch: output
        push_options: '--force'

        # Optional glob pattern of files which should be added to the commit
        file_pattern: example-app/

  ##
  # CHAPTER 2. Set up ESLint and type-checking
  #
  with-eslint:
    needs: [ create-app ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: output
    - name: (docs skip) Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - run: rm -Rf with-eslint && cp -R example-app with-eslint
    - name: (docs skip) yarn install
      run: yarn install
      working-directory: ./with-eslint
    - name: "Install eslint-config-react-app and its peer dependencies"
      # See https://www.npmjs.com/package/eslint-config-react-app#usage-outside-of-create-react-app for the up-to-date list
      run: yarn add -D eslint-config-react-app @typescript-eslint/eslint-plugin@^4.0.0 @typescript-eslint/parser@^4.0.0 babel-eslint@^10.0.0 eslint@^7.5.0 eslint-plugin-flowtype@^5.2.0 eslint-plugin-import@^2.22.0 eslint-plugin-jsx-a11y@^6.3.1 eslint-plugin-react@^7.20.3 eslint-plugin-react-hooks@^4.0.8
      working-directory: ./with-eslint
    - name: Install prettier & eslint-config-prettier
      run: yarn add -D eslint-config-prettier eslint-plugin-prettier prettier
      working-directory: ./with-eslint
    - name: Add eslint and prettier configs
      run: cp ../with-eslint-files/.eslintrc.json . && cp ../with-eslint-files/.prettierrc.json .
      working-directory: ./with-eslint
    - name: Install eslint scripts
      run: |-
        cp package.json{,.bak}
        jq -s '.[0] * .[1]' -- package.json.bak - <<- NEW_SCRIPTS > package.json
        {
          "scripts": {
          "lint": "eslint",
          "lint:fix": "eslint --fix",
          "lint:fix:all": "eslint --fix .",
          "lint:precommit": "eslint --fix --max-warnings=0",
          "lint:ci": "eslint --max-warnings=0",
          "lint:ci:all": "eslint --max-warnings=0 ."
          }
        }
        NEW_SCRIPTS
        diff -y package.json{.bak,} || true
        rm package.json.bak
      working-directory: ./with-eslint

    - name: Let's run that new script with an option to automatically fix all fixable lint warnings!
      run: yarn lint:fix:all
      working-directory: ./with-eslint
    - name: Verify that no linting issues remain
      run: yarn lint:ci:all --max-warnings=0
      working-directory: ./with-eslint

    - name: Install husky (see https://typicode.github.io/husky/#/?id=automatic-recommended for specific instructions)
      run: |-
        yarn add -D husky@^6.0.0
        # npm set-script prepare "husky install"
        cp package.json{,.bak}
        jq -s '.[0] * .[1]' -- package.json.bak - <<- NEW_SCRIPT > package.json
        {
          "scripts": {
            "prepare": "husky install || exit 0"
          }
        }
        NEW_SCRIPT
        diff -y package.json{.bak,} || true
        rm package.json.bak
        mkdir .husky && echo "_" > .husky/.gitignore
      working-directory: ./with-eslint

    - name: Install lint-staged
      run: yarn add -D lint-staged
      working-directory: ./with-eslint
    - name: Configure lint-staged to run yarn lint and type-check
      run: cp with-eslint-files/lint-staged.config.js with-eslint/
    - name: Add lint-staged to husky pre-commit hook
      run: yarn husky add .husky/pre-commit "yarn lint-staged"
      working-directory: ./with-eslint

    - name: (docs skip) Get tag timestamp
      run: echo "TAG_DATE=$(date +'%Y%m%d.%H%M')" >> $GITHUB_ENV
    - name: Commit our changes
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Lint code with eslint
        tagging_message: 'with-eslint-${{ env.TAG_DATE }}'
        branch: output
        file_pattern: with-eslint/

  ##
  # CHAPTER 3. Add testing with react-testing-library and Jest.
  #
  with-jest:
    needs: [ with-eslint ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: output
    - name: (docs skip) Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - run: rm -Rf with-jest && cp -R with-eslint with-jest
    - name: (docs skip) yarn install
      run: yarn install
      working-directory: ./with-jest

    ##
    # PART 1: Install jest and react testing library (plus jest-dom helpers)
    #
    - name: Install jest, @testing-library/react, @testing-library/jest-dom, and their TypeScript types.
      run: yarn add -D jest @testing-library/react @testing-library/jest-dom @types/jest @types/testing-library__jest-dom
      working-directory: ./with-jest
    - name: Use babel/next preset with jest by adding .babelrc
      run: cp with-jest-files/.babelrc with-jest/
    - name: Set up automatic import of @testing-library/jest-dom helpers
      run: cp with-jest-files/jest.*.js with-jest/
    - name: Stub out CSS imports (see https://jestjs.io/docs/en/webpack#handling-static-assets)
      run: cp -R with-jest-files/__mocks__ with-jest/
    - name: Add `yarn test` command
      run: |-
        cp package.json{,.bak}
        jq -s '.[0] * .[1]' -- package.json.bak - <<- NEW_SCRIPTS > package.json
        {
          "scripts": {
            "test": "jest"
          }
        }
        NEW_SCRIPTS
        diff -y package.json{.bak,} || true
        rm package.json.bak
      working-directory: ./with-jest
    - name: Commit testing setup
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Add testing with jest
        branch: output
        file_pattern: with-jest/

    ##
    # PART 2: Add linting rules for jest tests
    # See https://www.npmjs.com/package/eslint-config-react-app#jest-rules for details
    - name: Install eslint-plugin-jest
      run: yarn add -D eslint-plugin-jest@^24.0.0 eslint-plugin-testing-library@^3.9.0
      working-directory: ./with-jest
    - name: Add plugin:jest/recommended and plugin:jest/style to the `extends` section of .eslintrc.json
      run: >-
        cp .eslintrc.json{,.bak};
        jq
        '. + { plugins: ["jest"] } + {extends: ((.extends | index("plugin:@typescript-eslint/recommended")) as $insindex | .extends[0:$insindex] + ["react-app/jest", "plugin:jest/style"] + .extends[$insindex:])}'
        .eslintrc.json.bak > .eslintrc.json;
        diff -y .eslintrc.json{.bak,} || true;
        rm .eslintrc.json.bak
      working-directory: ./with-jest
    - name: Commit linting of tests
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Lint jest tests with eslint-plugin-jest
        branch: output
        file_pattern: with-jest/

    ##
    # PART 3: Add a sample test and run jest
    #
    - name: Add a sample test
      run: cp -R with-jest-files/__tests__ with-jest/
    - name: Run jest!
      run: yarn jest
      working-directory: ./with-jest
    - name: (docs skip) Get tag timestamp
      run: echo "TAG_DATE=$(date +'%Y%m%d.%H%M')" >> $GITHUB_ENV
    - name: Commit sample test
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Add a sample test for home page
        tagging_message: 'with-jest-${{ env.TAG_DATE }}'
        branch: output
        file_pattern: with-jest/
    
