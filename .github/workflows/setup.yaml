on:
  push:
    branches: [ master ]
    paths:
    - '.github/workflows/*'

jobs:
  reset-output:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: (docs skip) Clear output
      run: (git checkout output || git checkout -b output); git reset --hard origin/master; git push --force origin output
  create-app:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: output
    - name: Create a new Next.js app named 'example-app'
      run: yarn create next-app example-app --example ''
    - name: Start TypeScript conversion by creating `tsconfig.json`
      run: touch tsconfig.json
      working-directory: ./example-app
    - name: Find out TypeScript dependencies from next dev
      run: echo "##[set-output name=deps_command;]$(yarn dev 2>&1 | grep 'yarn add' | xargs)"
      id: get_dependencies_command
      working-directory: ./example-app
    - name: Install TypeScript dependencies!
      run: ${{steps.get_dependencies_command.outputs.deps_command}}
      working-directory: ./example-app
    - name: Rename default page and api files to TypeScript extension `.tsx`
      run: mv pages/index.{js,tsx} && mv pages/api/hello.{js,tsx}
      working-directory: ./example-app
    - name: Start `next dev`
      run: (timeout 15 yarn dev | tee output.log) || true; grep "compiled successfully" output.log
      working-directory: ./example-app
    - name: (docs skip) Remove technical file output.log
      run: rm example-app/output.log
    - name: Commit our new app
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Set up our brand new shiny Next.js TypeScript app

        # Optional name of the branch the commit should be pushed to
        # Required if Action is used in Workflow listening to the `pull_request` event.
        # Also required for almost all other events (eg. `schedule`)
        branch: output
        push_options: '--force'

        # Optional glob pattern of files which should be added to the commit
        file_pattern: example-app/
  with-eslint:
    needs: [ create-app ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: output
    - run: rm -Rf with-eslint && cp -R example-app with-eslint
    - name: Install eslint-config-react-app
      run: yarn add -D eslint-config-react-app
      working-directory: ./with-eslint
    - name: Install eslint-config-react-app's peer dependencies
      run: |-
        curl --silent https://raw.githubusercontent.com/facebook/create-react-app/master/packages/eslint-config-react-app/package.json \
          | jq .peerDependencies \
          | jq -r 'to_entries|map("\(.key)@\(.value|tostring)")|.[]'  \
          | xargs -I {} echo -n "\"{}\" " \
          | xargs yarn add -D
      working-directory: ./with-eslint
    - name: Install prettier & eslint-config-prettier
      run: yarn add -D eslint-config-prettier eslint-plugin-prettier prettier
      working-directory: ./with-eslint
    - name: Add eslint and prettier configs
      run: cp ../with-eslint-files/.eslintrc.json . && cp ../with-eslint-files/.prettierrc.json .
      working-directory: ./with-eslint
    
    - name: Install eslint scripts
      run: |-
        jq -s '.[0] * .[1]' -- package.json - <<- NEW_SCRIPTS > package.json.new
        {
          "scripts": {
          "lint": "eslint --config .eslintrc.json --ext .js,.jsx,.ts,.tsx",
          "lint:all": "eslint --config .eslintrc.json --ext .js,.jsx,.ts,.tsx ."
          }
        }
        NEW_SCRIPTS
        mv package.json.new package.json
      working-directory: ./with-eslint
    - name: Let's run that new script with an option to automatically fix all fixable lint warnings!
      run: yarn lint:all --fix
      working-directory: ./with-eslint

    - name: Verify that no linting issues remain
      run: yarn lint:all --max-warnings=0 # see https://github.com/eslint/eslint/issues/2309#issuecomment-219828044
      working-directory: ./with-eslint

    - name: Install husky and lint-staged
      run: yarn add -D husky lint-staged
      working-directory: ./with-eslint
    - name: Add husky and lint-staged configs to package.json
      run: |-
        jq -s '.[0] * .[1]' -- package.json - <<- NEW_SCRIPTS > package.json.new
        {
          "husky": {
            "hooks": {
              "pre-commit": "lint-staged"
            }
          },
          "lint-staged": {
            "*.{js,ts,tsx}": [
              "yarn lint --quiet --fix"
            ]
          }
        }
        NEW_SCRIPTS
        mv package.json.new package.json
      working-directory: ./with-eslint
    - name: Commit our changes
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Lint code with eslint
        branch: output
        file_pattern: with-eslint/

  with-jest:
    needs: [ with-eslint ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: output
    - run: rm -Rf with-jest && cp -R with-eslint with-jest
    - name: Install jest, @testing-library/react, @testing-library/jest-dom, and their TypeScript types.
      run: yarn add -D jest @testing-library/react @testing-library/jest-dom @types/jest @types/testing-library__jest-dom @types/testing-library__react
      working-directory: ./with-jest
    - name: Use babel/next preset with jest by adding .babelrc
      run: cp with-jest-files/.babelrc with-jest/
    - name: Set up automatic import of @testing-library/jest-dom helpers
      run: cp with-jest-files/jest.*.js with-jest/
    - name: Add `yarn test` command
      run: |-
        jq -s '.[0] * .[1]' -- package.json - <<- NEW_SCRIPTS > package.json.new
        {
          "scripts": {
            "test": "jest"
          }
        }
        NEW_SCRIPTS
        mv package.json.new package.json
      working-directory: ./with-jest
    - name: Commit testing setup
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Add testing with jest
        branch: output
        file_pattern: with-jest/