on:
  schedule:
    - cron: "0 0 * * 5"
  push:
    branches: [ master ]
    paths:
    - '.github/workflows/*'
    - '*-files/*'

jobs:
  reset-output:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: (docs skip) Clear output
      run: (git checkout output || git checkout -b output); git reset --hard origin/master; git push --force origin output
  create-app:
    needs: [ reset-output ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: output
    - name: (docs skip) Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: Create a new Next.js app named 'example-app'
      run: yarn create next-app example-app
    - name: Start TypeScript conversion by creating `tsconfig.json`
      run: touch tsconfig.json
      working-directory: ./example-app
    - name: Find out TypeScript dependencies from next dev
      run: echo "##[set-output name=deps_command;]$(yarn dev 2>&1 | grep 'yarn add' | xargs)"
      id: get_dependencies_command
      working-directory: ./example-app
    - name: Install TypeScript dependencies!
      run: ${{steps.get_dependencies_command.outputs.deps_command}}
      working-directory: ./example-app
    #
    # NOTE: This no longer works; import/no-anonymous-default-export and 
    #       @typescript-eslint/explicit-module-boundary-types rules fail
    #       direct translation.
    #
    # - name: Rename default page and api files to TypeScript extension `.tsx`
    #   run: mv pages/index.{js,tsx} && mv pages/api/hello.{js,tsx}
    #   working-directory: ./example-app
    - name: Replace JavaScript files with TypeScript
      run: |-
        cp -R create-app-files/app/pages example-app/
        rm example-app/pages/*.js example-app/pages/api/*.js
    - name: Start `next dev`
      run: (timeout 15 yarn dev | tee output.log) || true; grep "compiled successfully" output.log
      working-directory: ./example-app
    - name: (docs skip) Remove technical file output.log
      run: rm example-app/output.log
    - name: Commit our new app
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Set up our brand new shiny Next.js TypeScript app

        # Optional name of the branch the commit should be pushed to
        # Required if Action is used in Workflow listening to the `pull_request` event.
        # Also required for almost all other events (eg. `schedule`)
        branch: output
        push_options: '--force'

        # Optional glob pattern of files which should be added to the commit
        file_pattern: example-app/
  with-eslint:
    needs: [ create-app ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: output
    - name: (docs skip) Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - run: rm -Rf with-eslint && cp -R example-app with-eslint
    - name: (docs skip) yarn install
      run: yarn install
      working-directory: ./with-eslint
    - name: "Install eslint-config-react-app (FIXME: using an unreleased version of `eslint-config-react-app` that supports ESLint 7)"
      run: yarn add -D https://gitpkg.now.sh/facebook/create-react-app/packages/eslint-config-react-app?6223fd98c2c8abf4fa7320e048ec62ab0bb8941c
      working-directory: ./with-eslint
    - name: Install eslint-config-react-app's peer dependencies
      run: |-
        curl --silent https://raw.githubusercontent.com/facebook/create-react-app/6223fd98c2c8abf4fa7320e048ec62ab0bb8941c/packages/eslint-config-react-app/package.json \
          | jq .peerDependencies \
          | jq -r 'to_entries|map("\(.key)@\(.value|tostring)")|.[]'  \
          | xargs -I {} echo -n "\"{}\" " \
          | xargs yarn add -D
      working-directory: ./with-eslint
    - name: Install prettier & eslint-config-prettier
      run: yarn add -D eslint-config-prettier eslint-plugin-prettier prettier
      working-directory: ./with-eslint
    - name: Add eslint and prettier configs
      run: cp ../with-eslint-files/.eslintrc.json . && cp ../with-eslint-files/.prettierrc.json .
      working-directory: ./with-eslint
    - name: Install eslint scripts
      run: |-
        cp package.json{,.bak}
        jq -s '.[0] * .[1]' -- package.json.bak - <<- NEW_SCRIPTS > package.json
        {
          "scripts": {
          "lint": "eslint --config .eslintrc.json --ext .js,.jsx,.ts,.tsx",
          "lint:all": "eslint --config .eslintrc.json --ext .js,.jsx,.ts,.tsx ."
          }
        }
        NEW_SCRIPTS
        diff -y package.json{.bak,} || true
        rm package.json.bak
      working-directory: ./with-eslint
    - name: Let's run that new script with an option to automatically fix all fixable lint warnings!
      run: yarn lint:all --fix
      working-directory: ./with-eslint

    - name: Verify that no linting issues remain
      run: yarn lint:all --max-warnings=0 # see https://github.com/eslint/eslint/issues/2309#issuecomment-219828044
      working-directory: ./with-eslint

    - name: Install husky and lint-staged
      run: yarn add -D husky lint-staged
      working-directory: ./with-eslint
    - name: Add husky and lint-staged configs to package.json
      run: |-
        cp package.json{,.bak}
        jq -s '.[0] * .[1]' -- package.json.bak - <<- NEW_SCRIPTS > package.json
        {
          "husky": {
            "hooks": {
              "pre-commit": "lint-staged"
            }
          },
          "lint-staged": {
            "*.{js,ts,tsx}": [
              "yarn lint --quiet --fix"
            ]
          }
        }
        NEW_SCRIPTS
        diff -y package.json{.bak,} || true
        rm package.json.bak
      working-directory: ./with-eslint
    - name: Commit our changes
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Lint code with eslint
        branch: output
        file_pattern: with-eslint/

  with-jest:
    needs: [ with-eslint ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        ref: output
    - name: (docs skip) Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - run: rm -Rf with-jest && cp -R with-eslint with-jest
    - name: (docs skip) yarn install
      run: yarn install
      working-directory: ./with-jest

    ##
    # PART 1: Install jest and react testing library (plus jest-dom helpers)
    #
    - name: Install jest, @testing-library/react, @testing-library/jest-dom, and their TypeScript types.
      run: yarn add -D jest @testing-library/react @testing-library/jest-dom @types/jest @types/testing-library__jest-dom
      working-directory: ./with-jest
    - name: Use babel/next preset with jest by adding .babelrc
      run: cp with-jest-files/.babelrc with-jest/
    - name: Set up automatic import of @testing-library/jest-dom helpers
      run: cp with-jest-files/jest.*.js with-jest/
    - name: Stub out CSS imports (see https://jestjs.io/docs/en/webpack#handling-static-assets)
      run: cp -R with-jest-files/__mocks__ with-jest/
    - name: Add `yarn test` command
      run: |-
        cp package.json{,.bak}
        jq -s '.[0] * .[1]' -- package.json.bak - <<- NEW_SCRIPTS > package.json
        {
          "scripts": {
            "test": "jest"
          }
        }
        NEW_SCRIPTS
        diff -y package.json{.bak,} || true
        rm package.json.bak
      working-directory: ./with-jest
    - name: Commit testing setup
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Add testing with jest
        branch: output
        file_pattern: with-jest/

    ##
    # PART 2: Since jest in this configuration won't type check, set up scripts to run type checks
    #
    - name: Configure lint-staged to run type
      run: cp with-jest-files/lint-staged.config.js with-jest/
    - name: Add `yarn check-types` command
      run: |-
        cp package.json{,.bak}
        jq -s '.[0] * .[1]' -- package.json.bak - <<- NEW_SCRIPTS > package.json
        {
          "scripts": {
            "check-types": "tsc --pretty --noEmit"
          }
        }
        NEW_SCRIPTS
        diff -y package.json{.bak,} || true
        rm package.json.bak
      working-directory: ./with-jest
    - name: Remove `lint-staged` directive from package.json 
      run: |-
        cp package.json{,.bak}
        jq 'del(."lint-staged")' package.json.bak > package.json
        diff -y package.json{.bak,} || true
        rm package.json.bak
      working-directory: ./with-jest
    - name: Commit pre-commit type check hook
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Trigger type check on pre-commit hook
        branch: output
        file_pattern: with-jest/

    ##
    # PART 3: Add linting rules for jest tests
    #
    - name: Install eslint-plugin-jest
      run: yarn add -D eslint-plugin-jest
      working-directory: ./with-jest
    - name: Add plugin:jest/recommended and plugin:jest/style to the `extends` section of .eslintrc.json
      run: >-
        cp .eslintrc.json{,.bak};
        jq
        '. + { plugins: ["jest"] } + {extends: ((.extends | index("plugin:prettier/recommended")) as $insindex | .extends[0:$insindex] + ["plugin:jest/recommended", "plugin:jest/style"] + .extends[$insindex:])}'
        .eslintrc.json.bak > .eslintrc.json;
        diff -y .eslintrc.json{.bak,} || true;
        rm .eslintrc.json.bak
      working-directory: ./with-jest
    - name: Commit linting of tests
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Lint jest tests with eslint-plugin-jest
        branch: output
        file_pattern: with-jest/

    ##
    # PART 4: Add a sample test and run jest
    #
    - name: Add a sample test
      run: cp -R with-jest-files/__tests__ with-jest/
    - name: Run jest!
      run: yarn jest
      working-directory: ./with-jest
    - name: Commit sample test
      uses: stefanzweifel/git-auto-commit-action@v4
      with:
        commit_message: Add a sample test for home page
        branch: output
        file_pattern: with-jest/
    
